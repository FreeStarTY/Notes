{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230 Tianyu's Notes","text":"<p>\u8fd9\u91cc\u8bb0\u5f55\u4e86\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u4e0e\u5b9e\u8df5\u603b\u7ed3\uff0c\u76ee\u524d\u5305\u62ec\uff1a</p> <ul> <li> <p>ML Notes\uff1a\u673a\u5668\u5b66\u4e60\u57fa\u7840\u4e0e\u8fdb\u9636\u77e5\u8bc6</p> </li> <li> <p>LeetCode\uff1a\u7b97\u6cd5\u9898\u89e3\u4e0e\u601d\u8def\u603b\u7ed3</p> </li> <li> <p>\u5176\u4ed6\u4e13\u9898\uff1a\u5de5\u4f5c\u4e0e\u5b66\u4e60\u4e2d\u9047\u5230\u7684\u6709\u4ef7\u503c\u5185\u5bb9</p> </li> </ul>"},{"location":"#_1","title":"\ud83c\udd95 \u6700\u8fd1\u66f4\u65b0","text":"<ul> <li> <p>2025-08-15\uff1a\u53cc\u6307\u9488\u3001\u4e8c\u5206\u67e5\u627e</p> </li> <li> <p>2025-08-12\uff1a\u8d2a\u5fc3\u7b97\u6cd5</p> </li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    ML_Notes/\n        Basic Concepts.md\n    LeetCode/\n        Binary Search \u4e8c\u5206\u67e5\u627e/\n            \u67e5\u627e\u5cf0\u503c/\n                162 - Find Peak Element.md\n            \u67e5\u627e\u533a\u95f4/\n                34 - Find First and Last Position of Element in Sorted Array.md\n            \u6c42\u5e73\u65b9/\n                69 - Sqrt(x).md\n            \u65cb\u8f6c\u6570\u7ec4\u67e5\u627e\u6570\u5b57/\n                81 - Search in Rotated Sorted Array II.md\n            \u6838\u5fc3\u601d\u60f3.md\n        Greedy Algorithm \u8d2a\u5fc3\u7b97\u6cd5/\n            \u5206\u914d\u95ee\u9898/\n                135 - Candy.md\n                455 - Assign Cookies.md\n            \u533a\u95f4\u95ee\u9898/\n                435 - Non-overlapping Intervals.md\n            \u6838\u5fc3\u601d\u60f3.md\n        Two Pointer \u53cc\u6307\u9488/\n            \u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4/\n                88 - Merge Sorted Array.md\n            \u6ed1\u52a8\u7a97\u53e3/\n                76 - Minimum Window Substring.md\n            \u5feb\u6162\u6307\u9488/\n                142 - Linked List Cycle II.md\n            Two Sum/\n                167 - Two Sum II - Input array is sorted.md\n            \u6838\u5fc3\u601d\u60f3.md\n</code></pre>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/","title":"\u6838\u5fc3\u601d\u60f3","text":"<p>\u6bcf\u6b21\u67e5\u627e\u65f6\uff0c\u5c06\u5f85\u67e5\u627e\u7684\u5355\u8c03\u533a\u95f4\u5206\u6210\u4e24\u90e8\u5206\u5e76\u53ea\u53d6\u4e00\u90e8\u5206\u7ee7\u7eed\u67e5\u627e\uff0c\u4ece\u800c\u5927\u5927\u964d\u4f4e\u67e5\u627e\u7684\u590d\u6742\u5ea6\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3aO(n)\u7684\u6570\u7ec4\uff0c\u4e8c\u5206\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)</p>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97/81%20-%20Search%20in%20Rotated%20Sorted%20Array%20II/","title":"81 - Search in Rotated Sorted Array II","text":"<p>There is an integer array\u00a0<code>nums</code>\u00a0sorted in non-decreasing order (not necessarily with\u00a0distinct\u00a0values).</p> <p>Before being passed to your function,\u00a0<code>nums</code>\u00a0is\u00a0rotated\u00a0at an unknown pivot index\u00a0<code>k</code>\u00a0(<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is\u00a0<code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>\u00a0(0-indexed). For example,\u00a0<code>[0,1,2,4,4,4,5,6,6,7]</code>\u00a0might be rotated at pivot index\u00a0<code>5</code>\u00a0and become\u00a0<code>[4,5,6,6,7,0,1,2,4,4]</code>.</p> <p>Given the array\u00a0<code>nums</code> after\u00a0the rotation and an integer\u00a0<code>target</code>, return\u00a0<code>true</code> if <code>target</code> is in <code>nums</code>, or <code>false</code> if it is not in <code>nums</code>.</p> <p>You must decrease the overall operation steps as much as possible.</p> <p>Example 1:</p> <p>Input: nums = [2,5,6,0,0,1,2], target = 0 Output: true</p> <p>Example 2:</p> <p>Input: nums = [2,5,6,0,0,1,2], target = 3 Output: false</p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-104 &lt;= nums[i] &lt;= 104</code></li> <li><code>nums</code>\u00a0is guaranteed to be rotated at some pivot.</li> <li><code>-104 &lt;= target &lt;= 104</code></li> </ul>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97/81%20-%20Search%20in%20Rotated%20Sorted%20Array%20II/#_1","title":"\u601d\u8def","text":"<ul> <li>\u4f7f\u7528 \u4e8c\u5206\u67e5\u627e\uff0c\u4f46\u9700\u5148\u786e\u5b9a\u54ea\u4e00\u8fb9\u662f\u9012\u589e\u533a\u95f4\uff1a  </li> <li>\u82e5 <code>nums[mid] &lt; nums[right]</code> \u2192 \u53f3\u8fb9\u533a\u95f4\u9012\u589e  </li> <li>\u82e5 <code>nums[mid] &gt; nums[left]</code> \u2192 \u5de6\u8fb9\u533a\u95f4\u9012\u589e  </li> <li>\u5224\u65ad\u76ee\u6807\u503c <code>target</code> \u662f\u5426\u843d\u5728\u9012\u589e\u533a\u95f4\u5185\uff1a  </li> <li>\u82e5\u5728\u9012\u589e\u533a\u95f4\u5185\uff0c\u5219\u5728\u6b64\u533a\u95f4\u7ee7\u7eed\u4e8c\u5206  </li> <li>\u82e5\u4e0d\u5728\uff0c\u5219\u5728\u53e6\u4e00\u534a\u533a\u95f4\u7ee7\u7eed\u67e5\u627e  </li> <li>\u7279\u6b8a\u60c5\u51b5\uff1a  </li> <li>\u5f53 <code>nums[mid] == nums[left]</code> \u6216 <code>nums[mid] == nums[right]</code> \u65f6\uff0c\u65e0\u6cd5\u786e\u5b9a\u9012\u589e\u533a\u95f4 \u2192 \u79fb\u52a8 <code>left</code> \u6216 <code>right</code> \u8df3\u8fc7\u91cd\u590d\u5143\u7d20  </li> </ul>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97/81%20-%20Search%20in%20Rotated%20Sorted%20Array%20II/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def search(self, nums: List[int], target: int) -&gt; bool:\n        left, right = 0, len(nums) - 1\n\n        while left &lt;= right:\n            mid = (left + right) // 2\n\n            if nums[mid] == target:\n                return True\n\n            # \u907f\u5f00\u65e0\u6cd5\u5224\u65ad\u9012\u589e\u7a7a\u95f4\u7684\u60c5\u51b5\n            if nums[mid] == nums[left]:\n                left += 1\n            elif nums[mid] == nums[right]:\n                right -= 1\n            # \u5de6\u533a\u95f4\u9012\u589e\n            elif nums[mid] &gt; nums[left]:\n                if nums[left] &lt;= target &lt;= nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # \u53f3\u533a\u95f4\u9012\u589e\n            else:\n                if nums[mid] &lt;= target &lt;= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False\n</code></pre>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97/81%20-%20Search%20in%20Rotated%20Sorted%20Array%20II/#_3","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li> <p>\u6700\u574f\u60c5\u51b5\uff1a<code>O(n)</code></p> <ul> <li>\u5f53\u6240\u6709\u5143\u7d20\u90fd\u76f8\u540c\u800c\u76ee\u6807\u4e0d\u5728\u6570\u7ec4\u4e2d\u65f6\uff0c\u9700\u8981\u7ebf\u6027\u626b\u63cf</li> </ul> </li> <li> <p>\u6700\u597d\u60c5\u51b5\uff1a<code>O(log n)</code></p> <ul> <li>\u5f53\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u65f6\uff0c\u4e0e\u666e\u901a\u4e8c\u5206\u67e5\u627e\u4e00\u81f4</li> </ul> </li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code></p> <ul> <li>\u4ec5\u4f7f\u7528\u5e38\u6570\u4e2a\u6307\u9488\u53d8\u91cf</li> </ul> </li> </ul>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E5%8C%BA%E9%97%B4/34%20-%20Find%20First%20and%20Last%20Position%20of%20Element%20in%20Sorted%20Array/","title":"34 - Find First and Last Position of Element in Sorted Array","text":"<p>Given an array of integers\u00a0<code>nums</code>\u00a0sorted in non-decreasing order, find the starting and ending position of a given\u00a0<code>target</code>\u00a0value.</p> <p>If\u00a0<code>target</code>\u00a0is not found in the array, return\u00a0<code>[-1, -1]</code>.</p> <p>You must\u00a0write an algorithm with\u00a0<code>O(log n)</code>\u00a0runtime complexity.</p> <p>Example 1:</p> <p>Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4]</p> <p>Example 2:</p> <p>Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1]</p> <p>Example 3:</p> <p>Input: nums = [], target = 0 Output: [-1,-1]</p> <p>Constraints: - <code>0 &lt;= nums.length &lt;= 105</code> - <code>-109\u00a0&lt;= nums[i]\u00a0&lt;= 109</code> - <code>nums</code>\u00a0is a non-decreasing array. - <code>-109\u00a0&lt;= target\u00a0&lt;= 109</code></p>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E5%8C%BA%E9%97%B4/34%20-%20Find%20First%20and%20Last%20Position%20of%20Element%20in%20Sorted%20Array/#_1","title":"\u601d\u8def","text":"<ul> <li>\u4f7f\u7528 \u4e24\u6b21\u4e8c\u5206\u67e5\u627e\uff1a  </li> <li>\u67e5\u627e\u5f00\u59cb\u5143\u7d20\uff08\u5de6\u8fb9\u754c\uff09  <ul> <li>\u82e5 <code>mid == left</code>\uff0c\u6216\u8005 <code>nums[mid-1] &lt; target</code>\uff0c\u8bf4\u660e\u5de6\u8fb9\u6ca1\u6709\u66f4\u591a <code>target</code>\uff0c\u6b64\u65f6 <code>mid</code> \u5373\u4e3a\u7b2c\u4e00\u4e2a\u76ee\u6807\u4f4d\u7f6e  </li> </ul> </li> <li> <p>\u67e5\u627e\u7ed3\u675f\u5143\u7d20\uff08\u53f3\u8fb9\u754c\uff09  </p> <ul> <li>\u82e5 <code>mid == right</code>\uff0c\u6216\u8005 <code>nums[mid+1] &gt; target</code>\uff0c\u8bf4\u660e\u53f3\u8fb9\u6ca1\u6709\u66f4\u591a <code>target</code>\uff0c\u6b64\u65f6 <code>mid</code> \u5373\u4e3a\u6700\u540e\u4e00\u4e2a\u76ee\u6807\u4f4d\u7f6e  </li> </ul> </li> <li> <p>\u6838\u5fc3\u601d\u60f3\uff1a\u5728\u5e38\u89c4\u4e8c\u5206\u67e5\u627e\u7684\u57fa\u7840\u4e0a\uff0c\u589e\u52a0\u201c\u662f\u5426\u5230\u8fb9\u754c\u201d\u7684\u5224\u65ad\u6761\u4ef6\uff0c\u4ece\u800c\u786e\u5b9a\u5de6\u53f3\u8fb9\u754c\u3002</p> </li> </ul>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E5%8C%BA%E9%97%B4/34%20-%20Find%20First%20and%20Last%20Position%20of%20Element%20in%20Sorted%20Array/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def searchRange(self, nums: List[int], target: int) -&gt; List[int]:\n        lower_bound = self.lowerBound(nums, target)\n        if lower_bound == -1:\n            return [-1, -1]\n        upper_bound = self.upperBound(nums, target)\n        return [lower_bound, upper_bound]\n\n    def lowerBound(self, nums: List[int], target: int) -&gt; int:\n        left, right = 0, len(nums) - 1\n        while left &lt;= right:\n            mid = (left + right) // 2\n            if nums[mid] &lt; target:\n                left = mid + 1\n            elif nums[mid] &gt; target:\n                right = mid - 1\n            else:\n                # \u786e\u5b9a\u4e3a\u7b2c\u4e00\u4e2a target\n                if mid == left or nums[mid - 1] &lt; target:\n                    return mid\n                right = mid - 1\n        return -1\n\n    def upperBound(self, nums: List[int], target: int) -&gt; int:\n        left, right = 0, len(nums) - 1\n        while left &lt;= right:\n            mid = (left + right) // 2\n            if nums[mid] &lt; target:\n                left = mid + 1\n            elif nums[mid] &gt; target:\n                right = mid - 1\n            else:\n                # \u786e\u5b9a\u4e3a\u6700\u540e\u4e00\u4e2a target\n                if mid == right or nums[mid + 1] &gt; target:\n                    return mid\n                left = mid + 1\n        return -1\n</code></pre>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E5%8C%BA%E9%97%B4/34%20-%20Find%20First%20and%20Last%20Position%20of%20Element%20in%20Sorted%20Array/#_3","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u8bbe\u6570\u7ec4\u957f\u5ea6\u4e3a <code>n</code></p> </li> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(log n)</code></p> <ul> <li>\u8fdb\u884c\u4e24\u6b21\u4e8c\u5206\u67e5\u627e</li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code></p> <ul> <li>\u4ec5\u4f7f\u7528\u82e5\u5e72\u6307\u9488\u548c\u53d8\u91cf</li> </ul> </li> </ul>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E5%B3%B0%E5%80%BC/162%20-%20Find%20Peak%20Element/","title":"162 - Find Peak Element","text":"<p>A peak element is an element that is strictly greater than its neighbors.</p> <p>Given a\u00a00-indexed\u00a0integer array\u00a0<code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to\u00a0any of the peaks.</p> <p>You may imagine that\u00a0<code>nums[-1] = nums[n] = -\u221e</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p> <p>You must write an algorithm that runs in\u00a0<code>O(log n)</code>\u00a0time.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3,1] Output: 2 Explanation: 3 is a peak element and your function should return the index number 2.</p> <p>Example 2:</p> <p>Input: nums = [1,2,1,3,5,6,4] Output: 5 Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</p> <p>Constraints: - <code>1 &lt;= nums.length &lt;= 1000</code> - <code>-231 &lt;= nums[i] &lt;= 231 - 1</code> - <code>nums[i] != nums[i + 1]</code>\u00a0for all valid\u00a0<code>i</code>.</p>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E5%B3%B0%E5%80%BC/162%20-%20Find%20Peak%20Element/#_1","title":"\u601d\u8def","text":"<p>\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a 1. Case 1\uff1a\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5\u5143\u7d20\u4e0b\u6807 2. Case 2\uff1a\u6570\u7ec4\u957f\u5ea6 \u2265 2\uff0c\u5148\u5224\u65ad\u4e24\u7aef\uff1a    - \u82e5 <code>nums[0] &gt; nums[1]</code>\uff0c\u8fd4\u56de <code>0</code>    - \u82e5 <code>nums[n-1] &gt; nums[n-2]</code>\uff0c\u8fd4\u56de <code>n-1</code> 3. Case 3\uff1a\u82e5\u524d\u4e24\u79cd\u60c5\u51b5\u90fd\u4e0d\u6ee1\u8db3\uff0c\u5219\u5cf0\u503c\u4e00\u5b9a\u51fa\u73b0\u5728\u4e2d\u95f4\uff1a    - \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u5224\u65ad <code>mid</code> \u662f\u5426\u4e3a\u5cf0\u503c\uff1a      - \u82e5 <code>nums[mid] &gt; nums[mid-1] and nums[mid] &gt; nums[mid+1]</code>\uff0c\u5219 <code>mid</code> \u4e3a\u5cf0\u503c    - \u82e5\u4e0d\u662f\uff0c\u5219\u6839\u636e\u68af\u5ea6\u65b9\u5411\u7f29\u5c0f\u8303\u56f4\uff1a      - \u82e5 <code>nums[mid] &gt; nums[mid-1]</code>\uff0c\u8bf4\u660e\u53f3\u4fa7\u5b58\u5728\u5cf0\u503c \u2192 <code>left = mid + 1</code>      - \u5426\u5219\u5de6\u4fa7\u5b58\u5728\u5cf0\u503c \u2192 <code>right = mid - 1</code> </p>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E5%B3%B0%E5%80%BC/162%20-%20Find%20Peak%20Element/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def findPeakElement(self, nums: List[int]) -&gt; int:\n        n = len(nums)\n\n        # case 1\n        if n == 1:\n            return 0\n\n        # case 2\n        if nums[0] &gt; nums[1]:\n            return 0\n        if nums[n - 1] &gt; nums[n - 2]:\n            return n - 1\n\n        # case 3\n        left, right = 1, n - 2\n        while left &lt;= right:\n            mid = (left + right) // 2\n            # \u5224\u65ad\u662f\u5426\u4e3a\u5cf0\u503c\n            if nums[mid] &gt; nums[mid - 1] and nums[mid] &gt; nums[mid + 1]:\n                return mid\n            elif nums[mid] &gt; nums[mid - 1]:  # \u5f80\u53f3\u4e0a\u5347\n                left = mid + 1\n            else:  # \u5f80\u5de6\u4e0a\u5347\u6216\u8c37\u5e95\u60c5\u51b5\n                right = mid - 1\n\n        return -1\n</code></pre>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E5%B3%B0%E5%80%BC/162%20-%20Find%20Peak%20Element/#_3","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(log n)</code></p> <ul> <li>\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u8303\u56f4\u6bcf\u6b21\u7f29\u5c0f\u4e00\u534a</li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code></p> <ul> <li>\u4ec5\u4f7f\u7528\u5e38\u6570\u989d\u5916\u53d8\u91cf</li> </ul> </li> </ul>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%B1%82%E5%BC%80%E6%96%B9/69%20-%20Sqrt%28x%29/","title":"69 - Sqrt(x)","text":"<p>Given a non-negative integer\u00a0<code>x</code>, return\u00a0the square root of <code>x</code> rounded down to the nearest integer. The returned integer should be\u00a0non-negative\u00a0as well.</p> <p>You\u00a0must not use\u00a0any built-in exponent function or operator.</p> <ul> <li>For example, do not use\u00a0<code>pow(x, 0.5)</code>\u00a0in c++ or\u00a0<code>x ** 0.5</code>\u00a0in python.</li> </ul> <p>Example 1:</p> <p>Input: x = 4 Output: 2 Explanation: The square root of 4 is 2, so we return 2.</p> <p>Example 2:</p> <p>Input: x = 8 Output: 2 Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.</p> <p>Constraints:</p> <ul> <li><code>0 &lt;= x &lt;= 231 - 1</code></li> </ul>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%B1%82%E5%BC%80%E6%96%B9/69%20-%20Sqrt%28x%29/#_1","title":"\u601d\u8def","text":"<ul> <li>\u4f7f\u7528 \u4e8c\u5206\u67e5\u627e \u5728 <code>[1, x]</code> \u8303\u56f4\u5185\u5bfb\u627e\u5e73\u65b9\u6839  </li> <li>\u5173\u952e\u70b9\uff1a  </li> <li>\u5f53 <code>mid * mid == x</code> \u65f6\u76f4\u63a5\u8fd4\u56de  </li> <li>\u5f53 <code>mid * mid &lt; x</code> \u65f6\u5e73\u65b9\u6839\u5728\u53f3\u534a\u533a\u95f4\uff0c\u79fb\u52a8 <code>left = mid + 1</code> </li> <li>\u5f53 <code>mid * mid &gt; x</code> \u65f6\u5e73\u65b9\u6839\u5728\u5de6\u534a\u533a\u95f4\uff0c\u79fb\u52a8 <code>right = mid - 1</code> </li> <li>\u8fb9\u754c\u60c5\u51b5\u9700\u8003\u8651\uff1a  </li> <li><code>x = 0</code> \u6216\u8f83\u5c0f\u503c\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c  </li> </ul>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%B1%82%E5%BC%80%E6%96%B9/69%20-%20Sqrt%28x%29/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def mySqrt(self, x: int) -&gt; int:\n        if x == 0:\n            return 0\n\n        left, right = 1, x\n        while left &lt;= right:\n            mid = (left + right) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid &lt; x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n</code></pre>"},{"location":"LeetCode/Binary%20Search%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%B1%82%E5%BC%80%E6%96%B9/69%20-%20Sqrt%28x%29/#_3","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(log x)</code></p> <ul> <li>\u6bcf\u6b21\u4e8c\u5206\u8303\u56f4\u7f29\u5c0f\u4e00\u534a</li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code></p> <ul> <li>\u4ec5\u4f7f\u7528 <code>left</code>\u3001<code>right</code>\u3001<code>mid</code> \u7b49\u5e38\u6570\u989d\u5916\u7a7a\u95f4</li> </ul> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/","title":"\u6838\u5fc3\u601d\u60f3","text":"<p>\u601d\u60f3\uff1a\u6bcf\u6b21\u64cd\u4f5c\u90fd\u662f\u5c40\u90e8\u6700\u4f18\u7684\uff0c\u4ece\u800c\u4fdd\u8bc1\u7ed3\u679c\u5168\u5c40\u6700\u4f18</p>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/","title":"135 - Candy","text":"<p>There are\u00a0<code>n</code>\u00a0children standing in a line. Each child is assigned a rating value given in the integer array\u00a0<code>ratings</code>.</p> <p>You are giving candies to these children subjected to the following requirements:</p> <ul> <li>Each child must have at least one candy.</li> <li>Children with a higher rating get more candies than their neighbors.</li> </ul> <p>Return\u00a0the minimum number of candies you need to have to distribute the candies to the children.</p> <p>Example 1:</p> <p>Input: ratings = [1,0,2] Output: 5 Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</p> <p>Example 2:</p> <p>Input: ratings = [1,2,2] Output: 4 Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions.</p> <p>Constraints:</p> <ul> <li><code>n == ratings.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= ratings[i] &lt;= 2 * 104</code></li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/#_1","title":"\u601d\u8def","text":"<ol> <li>\u521d\u59cb\u5316\uff1a\u6240\u6709\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u5148\u8bbe\u4e3a 1\u3002  </li> <li>\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff1a\u82e5\u53f3\u8fb9\u5b69\u5b50\u8bc4\u5206\u9ad8\u4e8e\u5de6\u8fb9\uff0c\u5219\u53f3\u8fb9\u7cd6\u679c\u6570 = \u5de6\u8fb9\u7cd6\u679c\u6570 + 1\u3002  </li> <li>\u4ece\u53f3\u5411\u5de6\u904d\u5386\uff1a\u82e5\u5de6\u8fb9\u5b69\u5b50\u8bc4\u5206\u9ad8\u4e8e\u53f3\u8fb9\uff0c\u4e14\u5de6\u8fb9\u7cd6\u679c\u6570\u4e0d\u5927\u4e8e\u53f3\u8fb9\uff0c\u5219\u5de6\u8fb9\u7cd6\u679c\u6570 = \u53f3\u8fb9\u7cd6\u679c\u6570 + 1\u3002  </li> </ol>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/#_2","title":"\u8d2a\u5fc3\u7b56\u7565","text":"<p>\u5c06\u5de6\u53f3\u90fd\u9700\u8981\u6bd4\u8f83\u7684\u5173\u7cfb\u62c6\u89e3\u4e3a\u5206\u522b\u5bf9\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u6bd4\u8f83\uff1a - \u5728\u6bcf\u6b21\u904d\u5386\u4e2d\uff0c\u53ea\u8003\u8651\u5e76\u66f4\u65b0\u4e00\u4fa7\u7684\u5927\u5c0f\u5173\u7cfb\u3002</p>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def candy(self, ratings: List[int]) -&gt; int:\n        n = len(ratings)\n        candies = [1] * n\n\n        # \u4ece\u5de6\u5411\u53f3\u904d\u5386\n        for i in range(1, n):\n            if ratings[i] &gt; ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n\n        # \u4ece\u53f3\u5411\u5de6\u904d\u5386\n        for i in range(n - 1, 0, -1):\n            if ratings[i] &lt; ratings[i - 1]:\n                candies[i - 1] = max(candies[i - 1], candies[i] + 1)\n\n        return sum(candies)\n</code></pre>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/#_4","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> <ul> <li>\u904d\u5386 <code>candies</code> \u6570\u7ec4 3 \u6b21\uff08\u521d\u59cb\u5316 + \u4e24\u6b21\u904d\u5386\uff09</li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> <ul> <li>\u989d\u5916\u4f7f\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684 <code>candies</code> \u6570\u7ec4</li> </ul> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/","title":"455 - Assign Cookies","text":"<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p> <p>Each child\u00a0<code>i</code>\u00a0has a greed factor\u00a0<code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie\u00a0<code>j</code>\u00a0has a size\u00a0<code>s[j]</code>. If\u00a0<code>s[j] &gt;= g[i]</code>, we can assign the cookie\u00a0<code>j</code>\u00a0to the child\u00a0<code>i</code>, and the child\u00a0<code>i</code>\u00a0will be content. Your goal is to maximize the number of your content children and output the maximum number.</p> <p>Example 1:</p> <p>Input: g = [1,2,3], s = [1,1] Output: 1 Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3.  And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. You need to output 1.</p> <p>Example 2:</p> <p>Input: g = [1,2], s = [1,2,3] Output: 2 Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2.  You have 3 cookies and their sizes are big enough to gratify all of the children,  You need to output 2.</p>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_1","title":"\u601d\u8def","text":"<p>\u8d2a\u5fc3\u7b56\u7565\uff1a \u7ed9\u5269\u4f59\u5b69\u5b50\u4e2d\u6700\u5c0f\u9965\u997f\u5ea6\u7684\u5b69\u5b50\u5206\u914d\u6700\u5c0f\u7684\u80fd\u4f7f\u5176\u9971\u8179\u7684\u997c\u5e72\u3002</p>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -&gt; int:\n        # \u5148\u6392\u5e8f\n        g.sort()\n        s.sort()\n\n        g_i, s_i = 0, 0\n        g_n, s_n = len(g), len(s)\n\n        # \u53cc\u6307\u9488\u904d\u5386\u5b9e\u73b0\u8d2a\u5fc3\u7b97\u6cd5\n        while g_i &lt; g_n and s_i &lt; s_n:\n            if g[g_i] &lt;= s[s_i]:\n                g_i += 1\n            s_i += 1\n\n        return g_i\n</code></pre>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#complexity-analysis","title":"Complexity Analysis","text":""},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_3","title":"\u8bbe\u5b9a","text":"<ul> <li> <p>g \u7684\u957f\u5ea6\u4e3a n</p> </li> <li> <p>s \u7684\u957f\u5ea6\u4e3a m</p> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_4","title":"\u65f6\u95f4\u590d\u6742\u5ea6","text":"<ul> <li> <p>\u6392\u5e8f\u90e8\u5206\uff1a<code>O(n log n + m log m)</code></p> </li> <li> <p>\u53cc\u6307\u9488\u904d\u5386\u90e8\u5206\uff1a<code>O(n + m)</code></p> </li> <li> <p>\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a     \u7531\u4e8e <code>O(n + m)</code> \u6570\u91cf\u7ea7\u5c0f\u4e8e\u6392\u5e8f\u7684 <code>O(n log n + m log m)</code>\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a\uff1a     O(n log n + m log m)</p> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_5","title":"\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<ul> <li> <p>Python \u7684 <code>sort()</code> \u4f7f\u7528 Timsort\uff0c\u9700\u8981\u989d\u5916 <code>O(n + m)</code> \u7a7a\u95f4</p> </li> <li> <p>\u53cc\u6307\u9488\u90e8\u5206\u53ea\u7528\u5e38\u6570\u7a7a\u95f4 <code>O(1)</code></p> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/","title":"435 - Non-overlapping Intervals","text":"<p>Given an array of intervals\u00a0<code>intervals</code>\u00a0where\u00a0<code>intervals[i] = [starti, endi]</code>, return\u00a0the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.</p> <p>Note\u00a0that intervals which only touch at a point are\u00a0non-overlapping. For example,\u00a0<code>[1, 2]</code>\u00a0and\u00a0<code>[2, 3]</code>\u00a0are non-overlapping.</p> <p>Example 1:</p> <p>Input: intervals = [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.</p> <p>Example 2:</p> <p>Input: intervals = [[1,2],[1,2],[1,2]] Output: 2 Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.</p> <p>Example 3:</p> <p>Input: intervals = [[1,2],[2,3]] Output: 0 Explanation: You don't need to remove any of the intervals since they're already non-overlapping.</p>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/#_1","title":"\u601d\u8def","text":"<ul> <li>\u95ee\u9898\u8f6c\u5316\uff1a\u6700\u5c11\u7684\u79fb\u9664\u533a\u95f4\u4e2a\u6570 \u27fa \u5c3d\u91cf\u591a\u4fdd\u7559\u4e0d\u91cd\u53e0\u7684\u533a\u95f4  </li> <li>\u5173\u952e\u89c2\u5bdf\uff1a\u9009\u62e9\u7684\u533a\u95f4\u7ed3\u5c3e\u8d8a\u5c0f\uff0c\u7559\u7ed9\u5176\u5b83\u533a\u95f4\u7684\u7a7a\u95f4\u8d8a\u5927\uff0c\u80fd\u4fdd\u7559\u7684\u533a\u95f4\u5c31\u8d8a\u591a\u3002</li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/#_2","title":"\u8d2a\u5fc3\u7b56\u7565","text":"<p>\u4f18\u5148\u4fdd\u7559\u7ed3\u5c3e\u5c0f\u4e14\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4\u3002</p>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -&gt; int:\n        # \u6309\u7167\u7ed3\u675f\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n        intervals.sort(key=lambda x: x[1])\n\n        ans = 0   # \u8fd4\u56de\u503c\uff1a\u79fb\u9664\u7684\u533a\u95f4\u4e2a\u6570\n        k = -inf  # \u5f53\u524d\u7684\u7ed3\u675f\u70b9\n\n        for x, y in intervals:\n            if x &gt;= k:  # \u4e0d\u91cd\u53e0\uff0c\u4fdd\u7559\u8be5\u533a\u95f4\n                k = y\n            else:       # \u91cd\u53e0\uff0c\u79fb\u9664\u8be5\u533a\u95f4\n                ans += 1\n\n        return ans\n</code></pre>"},{"location":"LeetCode/Greedy%20Algorithm%20%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/#_4","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li> <p>\u6392\u5e8f\uff1a<code>O(n log n)</code></p> </li> <li> <p>\u904d\u5386\uff1a<code>O(n)</code></p> </li> <li> <p>\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n log n)</code></p> </li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li>Python <code>sort()</code> \u4f7f\u7528 Timsort\uff0c\u6700\u574f\u60c5\u51b5\u989d\u5916\u7a7a\u95f4 <code>O(n)</code></li> </ul> </li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/","title":"\u6838\u5fc3\u601d\u60f3","text":"<p>\u4e3b\u8981\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u3002 1. \u540c\u4e00\u6570\u7ec4\uff0c\u65b9\u5411\u76f8\u540c\u4e14\u4e0d\u4f1a\u76f8\u4ea4\uff1a\u6ed1\u52a8\u7a97\u53e3\uff08\u4e24\u4e2a\u6307\u9488\u5305\u56f4\u533a\u57df\uff09\uff0c\u5e38\u7528\u4e8e\u533a\u95f4\u641c\u7d22 2. \u540c\u4e00\u6570\u7ec4\uff0c\u65b9\u5411\u76f8\u53cd\uff1a\u641c\u7d22\uff0c\u6570\u7ec4\u901a\u5e38\u5df2\u6392\u597d\u5e8f</p>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/Two%20Sum/167%20-%20Two%20Sum%20II%20-%20Input%20array%20is%20sorted/","title":"167   Two Sum II   Input array is sorted","text":"<p>Given a\u00a01-indexed\u00a0array of integers\u00a0<code>numbers</code>\u00a0that is already\u00a0sorted in non-decreasing order, find two numbers such that they add up to a specific\u00a0<code>target</code>\u00a0number. Let these two numbers be\u00a0<code>numbers[index1]</code>\u00a0and\u00a0<code>numbers[index2]</code>\u00a0where\u00a0<code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code>.</p> <p>Return\u00a0the indices of the two numbers, <code>index1</code> and <code>index2</code>,\u00a0added by one\u00a0as an integer array <code>[index1, index2]</code> of length 2.</p> <p>The tests are generated such that there is\u00a0exactly one solution. You\u00a0may not\u00a0use the same element twice.</p> <p>Your solution must use only constant extra space.</p> <p>Example 1:</p> <p>Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].</p> <p>Example 2:</p> <p>Input: numbers = [2,3,4], target = 6 Output: [1,3] Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].</p> <p>Example 3:</p> <p>Input: numbers = [-1,0], target = -1 Output: [1,2] Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].</p> <p>Constraints:</p> <ul> <li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li> <li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li> <li><code>numbers</code>\u00a0is sorted in\u00a0non-decreasing order.</li> <li><code>-1000 &lt;= target &lt;= 1000</code></li> <li>The tests are generated such that there is\u00a0exactly one solution.</li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/Two%20Sum/167%20-%20Two%20Sum%20II%20-%20Input%20array%20is%20sorted/#_1","title":"\u601d\u8def","text":"<ul> <li>\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\uff0c\u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff1a</li> <li>\u6307\u9488 <code>l</code> \u4ece\u6700\u5de6\u8fb9\u5411\u53f3\u904d\u5386</li> <li>\u6307\u9488 <code>r</code> \u4ece\u6700\u53f3\u8fb9\u5411\u5de6\u904d\u5386</li> <li>\u82e5\u4e00\u5b9a\u5b58\u5728\u89e3\uff0c\u53ef\u8bc1\u660e\uff1a</li> <li>\u82e5 <code>numbers[l] + numbers[r] &lt; target</code>\uff0c\u5219 <code>l</code> \u53f3\u79fb\u4e00\u4f4d</li> <li>\u82e5 <code>numbers[l] + numbers[r] &gt; target</code>\uff0c\u5219 <code>r</code> \u5de6\u79fb\u4e00\u4f4d</li> <li>\u6700\u7ec8\u4e00\u5b9a\u4f1a\u6536\u655b\u5230\u6b63\u786e\u7684\u7ec4\u5408</li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/Two%20Sum/167%20-%20Two%20Sum%20II%20-%20Input%20array%20is%20sorted/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def twoSum(self, numbers: List[int], target: int) -&gt; List[int]:\n        l, r = 0, len(numbers) - 1\n\n        while l &lt; r:\n            if numbers[l] + numbers[r] == target:\n                return [l + 1, r + 1]\n            elif numbers[l] + numbers[r] &lt; target:\n                l += 1\n            else:\n                r -= 1\n</code></pre>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/Two%20Sum/167%20-%20Two%20Sum%20II%20-%20Input%20array%20is%20sorted/#_3","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code>     \u6570\u7ec4\u6700\u591a\u904d\u5386\u4e00\u904d</p> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code>     \u4ec5\u4f7f\u7528\u4e86 <code>l</code>\u3001<code>r</code> \u4e24\u4e2a\u6307\u9488\u7684\u989d\u5916\u7a7a\u95f4</p> </li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BD%92%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/88%20-%20Merge%20Sorted%20Array/","title":"88   Merge Sorted Array","text":"<p>You are given two integer arrays\u00a0<code>nums1</code>\u00a0and\u00a0<code>nums2</code>, sorted in\u00a0non-decreasing order, and two integers\u00a0<code>m</code>\u00a0and\u00a0<code>n</code>, representing the number of elements in\u00a0<code>nums1</code>\u00a0and\u00a0<code>nums2</code>\u00a0respectively.</p> <p>Merge <code>nums1</code>\u00a0and\u00a0<code>nums2</code>\u00a0into a single array sorted in\u00a0non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be\u00a0stored inside the array <code>nums1</code>. To accommodate this,\u00a0<code>nums1</code>\u00a0has a length of\u00a0<code>m + n</code>, where the first\u00a0<code>m</code>\u00a0elements denote the elements that should be merged, and the last\u00a0<code>n</code>\u00a0elements are set to\u00a0<code>0</code>\u00a0and should be ignored.\u00a0<code>nums2</code>\u00a0has a length of\u00a0<code>n</code>.</p> <p>Example 1:</p> <p>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.</p> <p>Example 2:</p> <p>Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1].</p> <p>Example 3:</p> <p>Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</p> <p>Constraints:</p> <ul> <li><code>nums1.length == m + n</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m, n &lt;= 200</code></li> <li><code>1 &lt;= m + n &lt;= 200</code></li> <li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BD%92%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/88%20-%20Merge%20Sorted%20Array/#_1","title":"\u601d\u8def","text":"<ul> <li>\u5df2\u77e5\u6761\u4ef6\uff1a<code>nums1</code> \u548c <code>nums2</code> \u90fd\u662f\u6709\u5e8f\u6570\u7ec4  </li> <li>\u4e09\u4e2a\u6307\u9488\uff1a</li> <li>\u6307\u9488 <code>i</code> \u6307\u5411 <code>nums1</code> \u6709\u6548\u90e8\u5206\u7684\u672b\u5c3e\uff08<code>m - 1</code>\uff09</li> <li>\u6307\u9488 <code>j</code> \u6307\u5411 <code>nums2</code> \u7684\u672b\u5c3e\uff08<code>n - 1</code>\uff09</li> <li>\u6307\u9488 <code>pos</code> \u6307\u5411\u5408\u5e76\u540e\u6570\u7ec4\u7684\u672b\u5c3e\uff08<code>m + n - 1</code>\uff09</li> <li>\u64cd\u4f5c\u6b65\u9aa4\uff1a</li> <li>\u6bd4\u8f83 <code>nums1[i]</code> \u548c <code>nums2[j]</code>\uff0c\u5c06\u8f83\u5927\u503c\u653e\u5728 <code>pos</code> \u4f4d\u7f6e</li> <li>\u79fb\u52a8\u5bf9\u5e94\u7684\u6307\u9488\u4ee5\u53ca <code>pos</code></li> <li>\u5904\u7406\u8fb9\u754c\u60c5\u51b5\uff1a<ul> <li>\u82e5 <code>nums2</code> \u63d0\u524d\u6392\u5b8c\uff0c\u53ea\u9700\u79fb\u52a8 <code>pos</code></li> <li>\u82e5 <code>nums1</code> \u63d0\u524d\u6392\u5b8c\uff0c\u5c06 <code>nums2</code> \u5269\u4f59\u90e8\u5206\u4f9d\u6b21\u586b\u5165</li> </ul> </li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BD%92%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/88%20-%20Merge%20Sorted%20Array/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        i, j = m - 1, n - 1\n        pos = m + n - 1\n\n        while pos &gt;= 0:\n            if j &lt; 0:  # nums2 \u5148\u6392\u5b8c\n                pos -= 1\n            elif i &lt; 0:  # nums1 \u5148\u6392\u5b8c\n                nums1[pos] = nums2[j]\n                j -= 1\n                pos -= 1\n            elif nums1[i] &lt;= nums2[j]:\n                nums1[pos] = nums2[j]\n                j -= 1\n                pos -= 1\n            else:\n                nums1[pos] = nums1[i]\n                i -= 1\n                pos -= 1\n</code></pre>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BD%92%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/88%20-%20Merge%20Sorted%20Array/#_3","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(m + n)</code>     \u6700\u591a\u904d\u5386\u6574\u4e2a <code>m + n</code> \u6570\u7ec4\u4e00\u6b21</p> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code>     \u4ec5\u4f7f\u7528\u4e86\u6307\u9488 <code>i</code>\u3001<code>j</code>\u3001<code>pos</code> \u7684\u989d\u5916\u7a7a\u95f4</p> </li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/","title":"142   Linked List Cycle II","text":"<p>Given the\u00a0<code>head</code>\u00a0of a linked list, return\u00a0the node where the cycle begins. If there is no cycle, return <code>null</code>.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\u00a0<code>next</code>\u00a0pointer. Internally,\u00a0<code>pos</code>\u00a0is used to denote the index of the node that tail's\u00a0<code>next</code>\u00a0pointer is connected to (0-indexed). It is\u00a0<code>-1</code>\u00a0if there is no cycle.\u00a0Note that <code>pos</code> is not passed as a parameter.</p> <p>Do not modify\u00a0the linked list.</p> <p>Example 1:</p> <p></p> <p>Input: head = [3,2,0,-4], pos = 1 Output: tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node.</p> <p>Example 2:</p> <p></p> <p>Input: head = [1,2], pos = 0 Output: tail connects to node index 0 Explanation: There is a cycle in the linked list, where tail connects to the first node.</p> <p>Example 3:</p> <p></p> <p>Input: head = [1], pos = -1 Output: no cycle Explanation: There is no cycle in the linked list.</p> <p>Constraints:</p> <ul> <li>The number of the nodes in the list is in the range\u00a0<code>[0, 104]</code>.</li> <li><code>-105 &lt;= Node.val &lt;= 105</code></li> <li><code>pos</code>\u00a0is\u00a0<code>-1</code>\u00a0or a\u00a0valid index\u00a0in the linked-list.</li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#_1","title":"\u601d\u8def","text":""},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#hash-set","title":"\u65b9\u6cd5\u4e00\uff1aHash Set","text":"<ol> <li>\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u5c06\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u653e\u5165 <code>hash set</code> \u4e2d  </li> <li>\u6bcf\u8d70\u4e00\u6b65\u68c0\u67e5\u5f53\u524d\u8282\u70b9\u662f\u5426\u5df2\u5728 <code>set</code> \u4e2d  </li> <li>\u5982\u679c\u5df2\u5b58\u5728\uff0c\u8bf4\u660e\u627e\u5230\u73af\u8def\u8d77\u70b9\uff0c\u8fd4\u56de\u5f53\u524d\u8282\u70b9  </li> <li>\u5982\u679c\u8d70\u5230 <code>null</code>\uff0c\u8bf4\u660e\u6ca1\u6709\u73af\u8def\uff0c\u8fd4\u56de <code>None</code> </li> </ol>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#floyd-tortoise-and-hare","title":"\u65b9\u6cd5\u4e8c\uff1aFloyd \u5224\u5708\u6cd5\uff08\u5feb\u6162\u6307\u9488 / Tortoise and Hare\uff09","text":"<ol> <li>\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\uff1a  </li> <li><code>slow</code> \u6bcf\u6b21\u8d70\u4e00\u6b65  </li> <li><code>fast</code> \u6bcf\u6b21\u8d70\u4e24\u6b65  </li> <li>\u5982\u679c <code>fast</code> \u6216 <code>fast.next</code> \u4e3a <code>None</code>\uff0c\u8bf4\u660e\u65e0\u73af  </li> <li>\u82e5\u5b58\u5728\u73af\u8def\uff0c\u5219 <code>slow</code> \u548c <code>fast</code> \u4e00\u5b9a\u4f1a\u5728\u73af\u4e0a\u7684\u67d0\u4e00\u70b9\u76f8\u9047  </li> <li>\u76f8\u9047\u65f6\u5c06 <code>fast</code> \u79fb\u56de\u94fe\u8868\u5934\uff0c\u5e76\u8ba9 <code>slow</code>\u3001<code>fast</code> \u90fd\u6bcf\u6b21\u8d70\u4e00\u6b65  </li> <li>\u5f53 <code>slow == fast</code> \u65f6\uff0c\u76f8\u9047\u8282\u70b9\u5c31\u662f\u73af\u7684\u8d77\u70b9\uff08\u6570\u5b66\u53ef\u8bc1\u660e\uff09</li> </ol>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#_3","title":"\u65b9\u6cd5\u4e00\uff1a\u5feb\u6162\u6307\u9488","text":"<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        slow = head\n        fast = head\n        is_first_cycle = True\n\n        # \u9636\u6bb5\u4e00\uff1a\u5224\u65ad\u662f\u5426\u6709\u73af\n        while fast != slow or is_first_cycle:\n            if fast is None or fast.next is None:\n                return None\n            fast = fast.next.next\n            slow = slow.next\n            is_first_cycle = False\n\n        # \u9636\u6bb5\u4e8c\uff1a\u5bfb\u627e\u73af\u7684\u8d77\u70b9\n        fast = head\n        while fast != slow:\n            fast = fast.next\n            slow = slow.next\n        return fast\n</code></pre>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#hash-set_1","title":"\u65b9\u6cd5\u4e8c\uff1aHash Set","text":"<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        node_seen = set()  # \u5df2\u8bbf\u95ee\u8282\u70b9\u96c6\u5408\n\n        node = head\n        while node is not None:\n            if node in node_seen:  # \u5f53\u524d\u8282\u70b9\u5df2\u51fa\u73b0\uff0c\u8bf4\u660e\u662f\u73af\u8def\u8d77\u70b9\n                return node\n            node_seen.add(node)\n            node = node.next\n\n        return None\n</code></pre>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#_4","title":"\u590d\u6742\u5ea6\u5206\u6790","text":""},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#_5","title":"\u65b9\u6cd5\u4e00\uff1a\u5feb\u6162\u6307\u9488","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> <ul> <li> <p>\u9636\u6bb5\u4e00\uff1a\u6700\u591a\u904d\u5386 <code>n</code> \u6b65</p> </li> <li> <p>\u9636\u6bb5\u4e8c\uff1a\u6700\u591a\u904d\u5386 <code>n</code> \u6b65</p> </li> <li> <p>\u603b\u4f53\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> </li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(1)</code></p> <ul> <li>\u4ec5\u4f7f\u7528 <code>slow</code> \u548c <code>fast</code> \u4e24\u4e2a\u6307\u9488</li> </ul> </li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/142%20-%20Linked%20List%20Cycle%20II/#hash-set_2","title":"\u65b9\u6cd5\u4e8c\uff1aHash Set","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> <ul> <li>\u6bcf\u4e2a\u8282\u70b9\u53ea\u8bbf\u95ee\u4e00\u6b21</li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> <ul> <li>\u6700\u574f\u60c5\u51b5\u9700\u5c06\u6240\u6709\u8282\u70b9\u653e\u5165\u96c6\u5408</li> </ul> </li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/76%20-%20Minimum%20Window%20Substring/","title":"76   Minimum Window Substring","text":"<p>Given two strings\u00a0<code>s</code>\u00a0and\u00a0<code>t</code>\u00a0of lengths\u00a0<code>m</code>\u00a0and\u00a0<code>n</code>\u00a0respectively, return\u00a0the\u00a0minimum window substring of <code>s</code> such that every character in <code>t</code> (including duplicates) is included in the window. If there is no such substring, return\u00a0the empty string <code>\"\"</code>.</p> <p>The testcases will be generated such that the answer is\u00a0unique.</p> <p>Example 1:</p> <p>Input: s = \"ADOBECODEBANC\", t = \"ABC\" Output: \"BANC\" Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.</p> <p>Example 2:</p> <p>Input: s = \"a\", t = \"a\" Output: \"a\" Explanation: The entire string s is the minimum window.</p> <p>Example 3:</p> <p>Input: s = \"a\", t = \"aa\" Output: \"\" Explanation: Both 'a's from t must be included in the window. Since the largest window of s only has one 'a', return empty string.</p> <p>Constraints:</p> <ul> <li><code>m == s.length</code></li> <li><code>n == t.length</code></li> <li><code>1 &lt;= m, n &lt;= 105</code></li> <li><code>s</code>\u00a0and\u00a0<code>t</code>\u00a0consist of uppercase and lowercase English letters.</li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/76%20-%20Minimum%20Window%20Substring/#_1","title":"\u601d\u8def","text":"<ul> <li>\u65b9\u6cd5\uff1a\u6ed1\u52a8\u7a97\u53e3 + \u53cc\u6307\u9488  </li> <li>\u5173\u952e\u53d8\u91cf\uff1a</li> <li><code>freq</code>\uff1a\u4f7f\u7528 <code>Counter</code> \u7edf\u8ba1 <code>t</code> \u4e2d\u5b57\u7b26\u51fa\u73b0\u6b21\u6570  </li> <li><code>count</code>\uff1a\u5f53\u524d\u7a97\u53e3\u5185\u5305\u542b\u7684 <code>t</code> \u4e2d\u5b57\u7b26\u4e2a\u6570  </li> <li><code>l</code>\u3001<code>r</code>\uff1a\u5de6\u53f3\u6307\u9488  </li> <li><code>min_l</code>\u3001<code>min_length</code>\uff1a\u8bb0\u5f55\u6700\u77ed\u8986\u76d6\u5b50\u4e32\u7684\u5de6\u8fb9\u754c\u548c\u957f\u5ea6  </li> <li>\u7b97\u6cd5\u6d41\u7a0b\uff1a</li> <li>\u79fb\u52a8\u53f3\u6307\u9488 <code>r</code>\uff0c\u5c06\u5b57\u7b26\u8ba1\u5165\u7a97\u53e3  </li> <li>\u82e5\u7a97\u53e3\u5df2\u5305\u542b <code>t</code> \u4e2d\u6240\u6709\u5b57\u7b26\uff0c\u5219\u5f00\u59cb\u53f3\u79fb\u5de6\u6307\u9488 <code>l</code> </li> <li>\u5728\u7f29\u5c0f\u7a97\u53e3\u65f6\uff0c\u6bd4\u8f83\u5f53\u524d\u7a97\u53e3\u662f\u5426\u6bd4\u5df2\u6709\u6700\u77ed\u7a97\u53e3\u66f4\u4f18\uff0c\u5e76\u66f4\u65b0\u7ed3\u679c  </li> <li>\u82e5\u7a97\u53e3\u4e0d\u518d\u6ee1\u8db3\u8986\u76d6\u6761\u4ef6\uff0c\u505c\u6b62\u7f29\u5c0f\uff0c\u7ee7\u7eed\u53f3\u79fb <code>r</code></li> </ul>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/76%20-%20Minimum%20Window%20Substring/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>from collections import Counter\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -&gt; str:\n        freq = Counter(t)  # \u7edf\u8ba1 t \u4e2d\u7684\u5b57\u7b26\u60c5\u51b5\n        count = 0  # \u5f53\u524d\u7a97\u53e3\u5305\u542b\u7684 t \u4e2d\u5b57\u7b26\u4e2a\u6570\n        min_l, min_length = None, None  # \u6700\u5c0f\u7a97\u53e3\u7684\u8d77\u59cb\u7d22\u5f15\u4e0e\u957f\u5ea6\n        l = 0\n\n        for r in range(len(s)):\n            if s[r] not in freq:  # r \u4f4d\u7f6e\u4e0d\u542b\u76ee\u6807\u5b57\u7b26\n                continue\n\n            # r \u4f4d\u7f6e\u5305\u542b\u76ee\u6807\u5b57\u7b26\n            freq[s[r]] -= 1\n            if freq[s[r]] &gt;= 0:  # \u8865\u9f50\u4e00\u4e2a\u7f3a\u5931\u5b57\u7b26\n                count += 1\n\n            # \u5f53\u7a97\u53e3\u5df2\u5305\u542b t \u7684\u5168\u90e8\u5b57\u7b26\uff0c\u5c1d\u8bd5\u53f3\u79fb l \u7f29\u5c0f\u7a97\u53e3\n            while count == len(t):\n                # \u66f4\u65b0\u6700\u77ed\u7a97\u53e3\n                if min_length is None or r - l + 1 &lt; min_length:\n                    min_l = l\n                    min_length = r - l + 1\n\n                # \u79fb\u9664 l \u4f4d\u7f6e\u5b57\u7b26\uff0c\u68c0\u67e5\u662f\u5426\u4ecd\u6ee1\u8db3\u6761\u4ef6\n                if s[l] in freq:\n                    freq[s[l]] += 1\n                    if freq[s[l]] &gt; 0:\n                        count -= 1\n                l += 1\n\n        return \"\" if min_length is None else s[min_l: min_l + min_length]\n</code></pre>"},{"location":"LeetCode/Two%20Pointer%20%E5%8F%8C%E6%8C%87%E9%92%88/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/76%20-%20Minimum%20Window%20Substring/#_3","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li> <p>\u6784\u5efa <code>Counter(t)</code>\uff1a<code>O(|t|)</code></p> </li> <li> <p>\u53cc\u6307\u9488\u904d\u5386 <code>s</code>\uff1a<code>O(|s|)</code></p> </li> <li> <p>\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(|s| + |t|)</code></p> </li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li> <p>\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u7a97\u53e3\u5927\u5c0f\u53ef\u8fbe <code>O(|s|)</code></p> </li> <li> <p><code>t</code> \u4e2d\u5b57\u7b26\u96c6\u5408\u5b58\u50a8\u9700\u8981 <code>O(|t|)</code></p> </li> <li> <p>\u603b\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(|s| + |t|)</code></p> </li> </ul> </li> </ul>"}]}