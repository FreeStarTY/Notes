{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230 Tianyu's Notes","text":"<p>\u8fd9\u91cc\u8bb0\u5f55\u4e86\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u4e0e\u5b9e\u8df5\u603b\u7ed3\uff0c\u76ee\u524d\u5305\u62ec\uff1a</p> <ul> <li>ML Notes\uff1a\u673a\u5668\u5b66\u4e60\u57fa\u7840\u4e0e\u8fdb\u9636\u77e5\u8bc6</li> <li>LeetCode\uff1a\u7b97\u6cd5\u9898\u89e3\u4e0e\u601d\u8def\u603b\u7ed3</li> <li>\u5176\u4ed6\u4e13\u9898\uff1a\u5de5\u4f5c\u4e0e\u5b66\u4e60\u4e2d\u9047\u5230\u7684\u6709\u4ef7\u503c\u5185\u5bb9</li> </ul>"},{"location":"#_1","title":"\ud83c\udd95 \u6700\u8fd1\u66f4\u65b0","text":"<ul> <li>2025-08-12\uff1a\u5b8c\u5584\u8d2a\u5fc3\u7b97\u6cd5\u9898\u89e3\uff08\u5206\u914d\u3001\u5206\u7cd6\u679c\u3001\u533a\u95f4\uff09</li> <li>2025-08-10\uff1a\u8865\u5145 ML Notes \u57fa\u7840\u6982\u5ff5</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    ML_Notes/\n        Basic Concepts.md\n    LeetCode/\n        Greedy Algorithm/\n        \u6838\u5fc3\u601d\u60f3.md\n        \u5206\u914d\u95ee\u9898/\n            135 - Assign Cookies.md\n            455 - Candy.md\n        \u533a\u95f4\u95ee\u9898/\n            435 - Non-overlapping Intervals.md\n</code></pre>"},{"location":"LeetCode/Greedy%20Algorithm/%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3/","title":"\u6838\u5fc3\u601d\u60f3","text":"<p>\u601d\u60f3\uff1a\u6bcf\u6b21\u64cd\u4f5c\u90fd\u662f\u5c40\u90e8\u6700\u4f18\u7684\uff0c\u4ece\u800c\u4fdd\u8bc1\u7ed3\u679c\u5168\u5c40\u6700\u4f18</p>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/","title":"135 - Candy","text":"<p>There are\u00a0<code>n</code>\u00a0children standing in a line. Each child is assigned a rating value given in the integer array\u00a0<code>ratings</code>.</p> <p>You are giving candies to these children subjected to the following requirements:</p> <ul> <li>Each child must have at least one candy.</li> <li>Children with a higher rating get more candies than their neighbors.</li> </ul> <p>Return\u00a0the minimum number of candies you need to have to distribute the candies to the children.</p> <p>Example 1:</p> <p>Input: ratings = [1,0,2] Output: 5 Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</p> <p>Example 2:</p> <p>Input: ratings = [1,2,2] Output: 4 Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions.</p> <p>Constraints:</p> <ul> <li><code>n == ratings.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 104</code></li> <li><code>0 &lt;= ratings[i] &lt;= 2 * 104</code></li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/#_1","title":"\u601d\u8def","text":"<ol> <li>\u521d\u59cb\u5316\uff1a\u6240\u6709\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u5148\u8bbe\u4e3a 1\u3002  </li> <li>\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff1a\u82e5\u53f3\u8fb9\u5b69\u5b50\u8bc4\u5206\u9ad8\u4e8e\u5de6\u8fb9\uff0c\u5219\u53f3\u8fb9\u7cd6\u679c\u6570 = \u5de6\u8fb9\u7cd6\u679c\u6570 + 1\u3002  </li> <li>\u4ece\u53f3\u5411\u5de6\u904d\u5386\uff1a\u82e5\u5de6\u8fb9\u5b69\u5b50\u8bc4\u5206\u9ad8\u4e8e\u53f3\u8fb9\uff0c\u4e14\u5de6\u8fb9\u7cd6\u679c\u6570\u4e0d\u5927\u4e8e\u53f3\u8fb9\uff0c\u5219\u5de6\u8fb9\u7cd6\u679c\u6570 = \u53f3\u8fb9\u7cd6\u679c\u6570 + 1\u3002  </li> </ol>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/#_2","title":"\u8d2a\u5fc3\u7b56\u7565","text":"<p>\u5c06\u5de6\u53f3\u90fd\u9700\u8981\u6bd4\u8f83\u7684\u5173\u7cfb\u62c6\u89e3\u4e3a\u5206\u522b\u5bf9\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u6bd4\u8f83\uff1a - \u5728\u6bcf\u6b21\u904d\u5386\u4e2d\uff0c\u53ea\u8003\u8651\u5e76\u66f4\u65b0\u4e00\u4fa7\u7684\u5927\u5c0f\u5173\u7cfb\u3002</p>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def candy(self, ratings: List[int]) -&gt; int:\n        n = len(ratings)\n        candies = [1] * n\n\n        # \u4ece\u5de6\u5411\u53f3\u904d\u5386\n        for i in range(1, n):\n            if ratings[i] &gt; ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n\n        # \u4ece\u53f3\u5411\u5de6\u904d\u5386\n        for i in range(n - 1, 0, -1):\n            if ratings[i] &lt; ratings[i - 1]:\n                candies[i - 1] = max(candies[i - 1], candies[i] + 1)\n\n        return sum(candies)\n</code></pre>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/135%20-%20Candy/#_4","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> <ul> <li>\u904d\u5386 <code>candies</code> \u6570\u7ec4 3 \u6b21\uff08\u521d\u59cb\u5316 + \u4e24\u6b21\u904d\u5386\uff09</li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n)</code></p> <ul> <li>\u989d\u5916\u4f7f\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>n</code> \u7684 <code>candies</code> \u6570\u7ec4</li> </ul> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/","title":"455 - Assign Cookies","text":"<p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p> <p>Each child\u00a0<code>i</code>\u00a0has a greed factor\u00a0<code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie\u00a0<code>j</code>\u00a0has a size\u00a0<code>s[j]</code>. If\u00a0<code>s[j] &gt;= g[i]</code>, we can assign the cookie\u00a0<code>j</code>\u00a0to the child\u00a0<code>i</code>, and the child\u00a0<code>i</code>\u00a0will be content. Your goal is to maximize the number of your content children and output the maximum number.</p> <p>Example 1:</p> <p>Input: g = [1,2,3], s = [1,1] Output: 1 Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3.  And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. You need to output 1.</p> <p>Example 2:</p> <p>Input: g = [1,2], s = [1,2,3] Output: 2 Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2.  You have 3 cookies and their sizes are big enough to gratify all of the children,  You need to output 2.</p>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_1","title":"\u601d\u8def","text":"<p>\u8d2a\u5fc3\u7b56\u7565\uff1a \u7ed9\u5269\u4f59\u5b69\u5b50\u4e2d\u6700\u5c0f\u9965\u997f\u5ea6\u7684\u5b69\u5b50\u5206\u914d\u6700\u5c0f\u7684\u80fd\u4f7f\u5176\u9971\u8179\u7684\u997c\u5e72\u3002</p>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -&gt; int:\n        # \u5148\u6392\u5e8f\n        g.sort()\n        s.sort()\n\n        g_i, s_i = 0, 0\n        g_n, s_n = len(g), len(s)\n\n        # \u53cc\u6307\u9488\u904d\u5386\u5b9e\u73b0\u8d2a\u5fc3\u7b97\u6cd5\n        while g_i &lt; g_n and s_i &lt; s_n:\n            if g[g_i] &lt;= s[s_i]:\n                g_i += 1\n            s_i += 1\n\n        return g_i\n</code></pre>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#complexity-analysis","title":"Complexity Analysis","text":""},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_3","title":"\u8bbe\u5b9a","text":"<ul> <li> <p>g \u7684\u957f\u5ea6\u4e3a n</p> </li> <li> <p>s \u7684\u957f\u5ea6\u4e3a m</p> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_4","title":"\u65f6\u95f4\u590d\u6742\u5ea6","text":"<ul> <li> <p>\u6392\u5e8f\u90e8\u5206\uff1a<code>O(n log n + m log m)</code></p> </li> <li> <p>\u53cc\u6307\u9488\u904d\u5386\u90e8\u5206\uff1a<code>O(n + m)</code></p> </li> <li> <p>\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a     \u7531\u4e8e <code>O(n + m)</code> \u6570\u91cf\u7ea7\u5c0f\u4e8e\u6392\u5e8f\u7684 <code>O(n log n + m log m)</code>\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a\uff1a     O(n log n + m log m)</p> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/455%20-%20Assign%20Cookies/#_5","title":"\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<ul> <li> <p>Python \u7684 <code>sort()</code> \u4f7f\u7528 Timsort\uff0c\u9700\u8981\u989d\u5916 <code>O(n + m)</code> \u7a7a\u95f4</p> </li> <li> <p>\u53cc\u6307\u9488\u90e8\u5206\u53ea\u7528\u5e38\u6570\u7a7a\u95f4 <code>O(1)</code></p> </li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/","title":"435 - Non-overlapping Intervals","text":"<p>Given an array of intervals\u00a0<code>intervals</code>\u00a0where\u00a0<code>intervals[i] = [starti, endi]</code>, return\u00a0the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.</p> <p>Note\u00a0that intervals which only touch at a point are\u00a0non-overlapping. For example,\u00a0<code>[1, 2]</code>\u00a0and\u00a0<code>[2, 3]</code>\u00a0are non-overlapping.</p> <p>Example 1:</p> <p>Input: intervals = [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.</p> <p>Example 2:</p> <p>Input: intervals = [[1,2],[1,2],[1,2]] Output: 2 Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.</p> <p>Example 3:</p> <p>Input: intervals = [[1,2],[2,3]] Output: 0 Explanation: You don't need to remove any of the intervals since they're already non-overlapping.</p>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/#_1","title":"\u601d\u8def","text":"<ul> <li>\u95ee\u9898\u8f6c\u5316\uff1a\u6700\u5c11\u7684\u79fb\u9664\u533a\u95f4\u4e2a\u6570 \u27fa \u5c3d\u91cf\u591a\u4fdd\u7559\u4e0d\u91cd\u53e0\u7684\u533a\u95f4  </li> <li>\u5173\u952e\u89c2\u5bdf\uff1a\u9009\u62e9\u7684\u533a\u95f4\u7ed3\u5c3e\u8d8a\u5c0f\uff0c\u7559\u7ed9\u5176\u5b83\u533a\u95f4\u7684\u7a7a\u95f4\u8d8a\u5927\uff0c\u80fd\u4fdd\u7559\u7684\u533a\u95f4\u5c31\u8d8a\u591a\u3002</li> </ul>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/#_2","title":"\u8d2a\u5fc3\u7b56\u7565","text":"<p>\u4f18\u5148\u4fdd\u7559\u7ed3\u5c3e\u5c0f\u4e14\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4\u3002</p>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -&gt; int:\n        # \u6309\u7167\u7ed3\u675f\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n        intervals.sort(key=lambda x: x[1])\n\n        ans = 0   # \u8fd4\u56de\u503c\uff1a\u79fb\u9664\u7684\u533a\u95f4\u4e2a\u6570\n        k = -inf  # \u5f53\u524d\u7684\u7ed3\u675f\u70b9\n\n        for x, y in intervals:\n            if x &gt;= k:  # \u4e0d\u91cd\u53e0\uff0c\u4fdd\u7559\u8be5\u533a\u95f4\n                k = y\n            else:       # \u91cd\u53e0\uff0c\u79fb\u9664\u8be5\u533a\u95f4\n                ans += 1\n\n        return ans\n</code></pre>"},{"location":"LeetCode/Greedy%20Algorithm/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/435%20-%20Non-overlapping%20Intervals/#_4","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li> <p>\u6392\u5e8f\uff1a<code>O(n log n)</code></p> </li> <li> <p>\u904d\u5386\uff1a<code>O(n)</code></p> </li> <li> <p>\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a<code>O(n log n)</code></p> </li> </ul> </li> <li> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a</p> <ul> <li>Python <code>sort()</code> \u4f7f\u7528 Timsort\uff0c\u6700\u574f\u60c5\u51b5\u989d\u5916\u7a7a\u95f4 <code>O(n)</code></li> </ul> </li> </ul>"}]}